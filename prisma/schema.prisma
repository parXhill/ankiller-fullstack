datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model AnkillerTestData {
  id                     Int     @id @default(autoincrement())
  keyword                String  @db.VarChar(255)
  exemplar               String? @db.VarChar(255)
  keywordtranslation     String? @db.VarChar(255)
  exemplartranslation    String? @db.VarChar(255)
  targetlanguage         String? @db.VarChar(255)
  lemmas                 String? @db.VarChar(255)
  dependencies           String? @db.VarChar(255)
  aigenerated            Boolean
  aimodel                String? @db.VarChar(255)
  languagelevel          String? @db.VarChar(255)
  numberofkeywords       Int?
  exemplarsentencelength Int?
  keywordsignificance    String? @db.VarChar(255)
  keywordgrammarformat   String? @db.VarChar(255)
  partofspeech           String? @db.VarChar(255)

  @@map("ankillertestdata") // Keeps the database table name lowercase
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String?          @unique
  emailVerified DateTime?
  image         String?
  country       String?         // From your original schema
  accounts      Account[]
  sessions      Session[]
  decks         Deck[]          // Relation to Decks
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime? @updatedAt
}

model Deck {
  id        Int      @id @default(autoincrement())
  title     String
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade) // Relation to Users
  cards     Card[]   // Relation to Cards
}

model Card {
  id                     Int      @id @default(autoincrement())
  deckId                 Int
  deck                   Deck     @relation(fields: [deckId], references: [id], onDelete: Cascade) // Relation to Decks
  keyword                String   @db.VarChar(255)
  exemplar               String?  @db.VarChar(255)
  keywordTranslation     String?  @db.VarChar(255)
  exemplarTranslation    String?  @db.VarChar(255)
  targetLanguage         String?  @db.VarChar(255)
  lemmas                 String?  @db.VarChar(255)
  dependencies           String?  @db.VarChar(255)
  aiGenerated            Boolean
  aiModel                String?  @db.VarChar(255)
  languageLevel          String?  @db.VarChar(255)
  numberOfKeywords       Int?
  exemplarSentenceLength Int?
  keywordSignificance    String?  @db.VarChar(255)
  keywordGrammarFormat   String?  @db.VarChar(255)
  partOfSpeech           String?  @db.VarChar(255)
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}